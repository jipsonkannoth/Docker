name: ECR Image Build and Push

########################################################################################################################
## Github Envs (Dev and Staging)
########################################################################################################################
# AWS_DEV_ACCESS_KEY_ID
# AWS_DEV_SECRET_ACCESS_KEY
# SLACK_DEV_DEPLOYMENT_ALERTS_URL
## Devtest1
# AWS_DEVTEST1_ECR_REPOSITORY
# AWS_DEVTEST1_AUTO_SCALING_GROUP_NAME
# AWS_DEVTEST1_SECRET_MANAGER_CKYC_API
## Staging
# AWS_STAGING_ECR_REPOSITORY
# AWS_STAGING_AUTO_SCALING_GROUP_NAME
# AWS_STAGING_SECRET_MANAGER_CKYC_API

########################################################################################################################
## Github Envs (Prod)
########################################################################################################################
# AWS_PROD_ACCESS_KEY_ID
# AWS_PROD_SECRET_ACCESS_KEY
# SLACK_PROD_DEPLOYMENT_ALERTS_URL
# AWS_PRODUCTION_ECR_REPOSITORY
# AWS_PRODUCTION_AUTO_SCALING_GROUP_NAME
# AWS_PRODUCTION_SECRET_MANAGER_CKYC_API

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target Environment"
        required: true
        default: "devtest1"
        type: choice
        options:
          - production
          - staging
          - devtest1

jobs:
  branch-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch against environment selection
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/master" && "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "Error: Production environment can only be updated with master branch!"
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Configure Environment Variables
        id: set-env
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_PROD_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "SLACK_DEPLOYMENT_ALERTS_URL=${{ secrets.SLACK_PROD_DEPLOYMENT_ALERTS_URL }}" >> $GITHUB_ENV
            echo "AWS_ECR_REPOSITORY=${{ secrets.AWS_PRODUCTION_ECR_REPOSITORY }}" >> $GITHUB_ENV
            echo "AUTO_SCALING_GROUP_NAME=${{ secrets.AWS_PRODUCTION_AUTO_SCALING_GROUP_NAME }}" >> $GITHUB_ENV
            echo "SECRET_MANAGER=${{ secrets.AWS_PRODUCTION_SECRET_MANAGER_CKYC_API }}" >> $GITHUB_ENV
          else
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_DEV_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "SLACK_DEPLOYMENT_ALERTS_URL=${{ secrets.SLACK_DEV_DEPLOYMENT_ALERTS_URL }}" >> $GITHUB_ENV
            if [ "${{ github.event.inputs.environment }}" == "devtest1" ]; then
              echo "AWS_ECR_REPOSITORY=${{ secrets.AWS_DEVTEST1_ECR_REPOSITORY }}" >> $GITHUB_ENV
              echo "AUTO_SCALING_GROUP_NAME=${{ secrets.AWS_DEVTEST1_AUTO_SCALING_GROUP_NAME }}" >> $GITHUB_ENV
              echo "SECRET_MANAGER=${{ secrets.AWS_DEVTEST1_SECRET_MANAGER_CKYC_API }}" >> $GITHUB_ENV
            else
              echo "AWS_ECR_REPOSITORY=${{ secrets.AWS_STAGING_ECR_REPOSITORY }}" >> $GITHUB_ENV
              echo "AUTO_SCALING_GROUP_NAME=${{ secrets.AWS_STAGING_AUTO_SCALING_GROUP_NAME }}" >> $GITHUB_ENV
              echo "SECRET_MANAGER=${{ secrets.AWS_STAGING_SECRET_MANAGER_CKYC_API }}" >> $GITHUB_ENV
            fi
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Build, tag, and push image to Amazon ECR
        env:
          SECRET_MANAGER: ${{ env.SECRET_MANAGER }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws secretsmanager get-secret-value --secret-id "$SECRET_MANAGER" --region ap-south-1 --query SecretString --output text | jq -r 'to_entries[] | "\(.key)=\(.value)"' > .env
           docker buildx create --use
           docker buildx build --file ./Dockerfile.arm64 --platform linux/amd64,linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY:latest --push .

      - name: Start Instance Refresh in Auto Scaling Group & Send Slack Notification
        env:
          AUTO_SCALING_GROUP_NAME: ${{ env.AUTO_SCALING_GROUP_NAME }}
          SLACK_DEPLOYMENT_ALERTS_URL: ${{ env.SLACK_DEPLOYMENT_ALERTS_URL }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          refresh_id=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "$AUTO_SCALING_GROUP_NAME" \
            --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 100, "MaxHealthyPercentage": 200, "StandbyInstances": "Terminate", "ScaleInProtectedInstances": "Ignore"}' \
            --query 'InstanceRefreshId' --output text)
          curl --location "$SLACK_DEPLOYMENT_ALERTS_URL" \
            --data-raw '{"text": "<!channel> *CKYC* service autoscaling group refresh initiated by '"${{ env.GITHUB_ACTOR }}"'! ðŸš€ Refresh ID: '"$refresh_id"'"}'
